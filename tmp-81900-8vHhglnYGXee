process.on('message', function(m) {function parallelMS(arr, done) {
    const fileSync = require('tmp').fileSync;
    const writeFileSync = require('fs').writeFileSync;
    const fork = require('child_process').fork;

    function createWorker(fn) {
        const tmpobj = fileSync({ tmpdir: "." });
        writeFileSync(tmpobj.name,
            `process.on('message', function(m) {` +
            `${fn.toString()}` +
            `parallelMS(m[0], m[1]);});`);
    
        return fork(tmpobj.name);
    }

    // Merge two sorted arrays into one
    function mergeSorted(leftSort, rightSort) {
        let merged = [];
        let left = 0, right = 0;

        while (left < leftSort.length && right < rightSort.length) {
            if (leftSort[left] < rightSort[right]) {
                merged.push(leftSort[left]);
                left++;
            } else {
                merged.push(rightSort[right]);
                right++;
            }
        }

        // Append the remaining elements of the left or right array
        while (left < leftSort.length) {
            merged.push(leftSort[left]);
            left++;
        }

        while (right < rightSort.length) {
            merged.push(rightSort[right]);
            right++;
        }

        return merged;
    }

    // Base case, array of size 1, return the array
    const thresh = 1;
    if (arr.length <= thresh) {
        if (done === undefined) process.send(arr);
        else done(arr);
        return;
    }

    // Split the array into two halves
    let left = arr.slice(0, Math.floor(arr.length / 2)),
        right = arr.slice(Math.floor(arr.length / 2), arr.length);

    // Track the results and completion status of the workers
    let leftResult = null, rightResult = null;
    let leftDone = false, rightDone = false;

    // Create and handle the left worker
    let leftWorker = createWorker(parallelMS);
    leftWorker.on("message", function(leftSort) {
        console.log("Left worker finished sorting:", leftSort);
        leftResult = leftSort;
        leftDone = true;

        // If both workers are done, merge the results
        if (leftDone && rightDone) {
            let merged = mergeSorted(leftResult, rightResult);
            if (done === undefined) process.send(merged);
            else done(merged);
        }
        leftWorker.kill(); // Kill the left worker
    }).send([left]);

    // Handle the right worker
    parallelMS(right, function(rightSort) {
        console.log("Right worker finished sorting:", rightSort);
        rightResult = rightSort;
        rightDone = true;

        // If both workers are done, merge the results
        if (leftDone && rightDone) {
            let merged = mergeSorted(leftResult, rightResult);
            if (done === undefined) process.send(merged);
            else done(merged);
        }
    });
}parallelMS(m[0], m[1]);});