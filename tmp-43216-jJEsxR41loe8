process.on('message', function(m) {function parallelMS(arr, done) {
    const fileSync = require('tmp').fileSync;
    const writeFileSync = require('fs').writeFileSync;
    const fork = require('child_process').fork;

    function createWorker(fn) {
      const tmpobj = fileSync({ tmpdir: "." });
      writeFileSync(tmpobj.name,
          `process.on('message', function(m) {` +
          `${fn.toString()}` +
          `parallelMS(m[0], m[1]);});`);
    
      return fork(tmpobj.name);
    }
    
    // adjust merge function from slides to just take two sorted arrays and merge them
    function mergeSorted(leftSort, rightSort) {
        let merged = [];
        for (let left = 0, right = 0; left < leftSort.length || right < rightSort.length;) {
            if (left < leftSort.length && (right >= rightSort || leftSort[left] < rightSort[right])) {
                merged.push(leftSort[left]);
                left++;
            } else if (right < rightSort.length) {
                merged.push(rightSort[right])
                right++;
            }
        }

        return merged;
    }

    // Base case, array of size 1, is sent
    const thresh = 1;
    if(arr.length <= thresh) {
        if(done === undefined) process.send(arr);
        else done(arr);
        return;
    }
  
    let left = arr.slice(0, Math.ceil(arr.length/2)),
        right = arr.slice(Math.floor(arr.length/2), arr.length);
  
    // adding two new variables to track when each worker finishes
    let leftResult = null;
        rightResult = null;
        leftDone = false;
        rightDone = false;
        leftWorker = createWorker(parallelMS);
  
    leftWorker.on("message", function(leftSort) {
      console.log("Left worker: " + leftSort);
      leftResult = leftSort;
      leftDone = true;

      if(leftDone && rightDone) {
        let merged = mergeSorted(leftResult, rightResult)
        if (done === undefined) process.send(merged);
        else done(merged);
      }
      leftWorker.kill();
    }).send([left]);

    parallelMS(right, function(rightSort) {
      console.log("Right worker: " + rightSort);
      rightResult = rightSort;
      rightDone = true;

      if(leftDone && rightDone) {
        let merged = mergeSorted(leftResult, rightResult)
        if (done === undefined) process.send(merged);
        else done(merged);
      }
    });
}parallelMS(m[0], m[1]);});